#!/bin/sh /etc/rc.common
#
# Copyright 2019 Xingwang Liao <kuoruan@gmail.com>
# Licensed to the public under the MIT License.
#

START=99
USE_PROCD=1

NAME=v2ray
CONFIG_FOLDER=/var/etc/$NAME

TRANSPARENT_PROXY_ENABLED=
TRANSPARENT_PROXY_ADDITION=
TRANSPARENT_PROXY_PORT=
TRANSPARENT_PROXY_SERVER_IPS=

if [ -r /usr/share/libubox/jshn.sh ] ; then
	. /usr/share/libubox/jshn.sh
elif [ -r /lib/functions/jshn.sh ] ; then
	. /lib/functions/jshn.sh
else
	logger -p daemon.err -t "$NAME" "Package required: jshn."
	echo "[err] Package required: jshn." >&2
	exit 1
fi

_log() {
	local level="$1" ; shift
	local msg="$@"
	logger -p "daemon.$level" -t "$NAME" "$msg"

	echo "[$level] $msg" >&2
}

_info() {
	_log "info" $@
}

_err() {
	_log "err" $@
}

v2ray_file_validate() {
	local file="$1"

	test -f "$file" || return 1
	test -x "$file" || chmod 755 "$file"

	eval "$file --version 2>/dev/null" | grep -q "V2Ray"
}

get_value_from_file() {
	local file="$1"
	local key="$2"

	cat >&1 <<-EOF | lua - 2>/dev/null
	local v2ray = require "luci.model.v2ray"
	local json = v2ray.get_value_from_file("$file", "$key")
	print(json)
	EOF
}

get_value_from_json() {
	local json="$1"
	local key="$1"

	local value=""

	local old_ns
	json_set_namespace "json_key" old_ns
	json_load "$json"
	json_get_var "$key" value
	json_cleanup
	json_set_namespace "$old_ns"

	echo "$value"
}

v2ray_section_validate() {
	uci_validate_section "$NAME" "v2ray" "$1" \
		'enabled:bool:0' \
		'v2ray_file:string' \
		'asset_location:directory' \
		'config_file:file' \
		'loglevel:or("debug", "info", "warning", "error", "none")' \
		'access_log:string' \
		'error_log:string' \
		'stats_enabled:bool:0' \
		'transport_enabled:bool:0' \
		'inbounds:list(uci("v2ray", "@inbound"))' \
		'outbounds:list(uci("v2ray", "@outbound"))'
}

dns_section_validate() {
	uci_validate_section "$NAME" "dns" "$1" \
		'enabled:bool:0' \
		'tag:string' \
		'client_ip:ipaddr' \
		'hosts:list(string)' \
		'servers:list(uci("v2ray", "@dns_server"))'
}

dns_server_section_validate() {
	uci_validate_section "$NAME" "dns_server" "$1" \
		'address:ipaddr' \
		'port:port' \
		'domains:list(string)'
}

routing_section_validate() {
	uci_validate_section "$NAME" "routing" "$1" \
		'enabled:bool:0' \
		'domain_strategy:or("AsIs", "IPIfNonMatch", "IPOnDemand"):AsIs' \
		'rules:list(uci("v2ray", "@routing_rule"))' \
		'balancers:list(uci("v2ray", "@routing_balancer"))'
}

routing_rule_section_validate() {
	uci_validate_section "$NAME" "routing_rule" "$1" \
		'type:"field"' \
		'domain:list(string)' \
		'ip:list(string)' \
		'port:or(port, portrange)' \
		'network:list(or("tcp", "udp"))' \
		'source:list(string)' \
		'user:list(string)' \
		'inbound_tag:list(string)' \
		'protocol:list(or("http", "tls", "bittorrent"))' \
		'attrs:string' \
		'outbound_tag:string' \
		'balancer_tag:string'
}

routing_balancer_section_validate() {
	uci_validate_section "$NAME" "routing_balancer" "$1" \
		'tag:string' \
		'selector:list(string)'
}

policy_section_validate() {
	uci_validate_section "$NAME" "policy" "$1" \
		'enabled:bool:0' \
		'levels:list(uci("v2ray", "@policy_level"))' \
		'system_stats_inbound_uplink:bool:0' \
		'system_stats_inbound_downlink:bool:0'
}

policy_level_section_validate() {
	uci_validate_section "$NAME" "policy_level" "$1" \
		'level:uinteger' \
		'handshake:uinteger:4' \
		'conn_idle:uinteger:300' \
		'uplink_only:uinteger:2' \
		'downlink_only:uinteger:5' \
		'stats_user_uplink:bool:0' \
		'stats_user_downlink:bool:0' \
		'buffer_size:uinteger'
}

reverse_section_validate() {
	uci_validate_section "$NAME" "reverse" "$1" \
		'enabled:bool:0' \
		'bridges:list(string)' \
		'portals:list(string)'
}

inbound_section_validate() {
	uci_validate_section "$NAME" "inbound" "$1" \
		'port:or(port, portrange, string)' \
		'listen:ipaddr:0.0.0.0' \
		'protocol:string' \
		'transparent_proxy_enabled:bool:0' \
		'transparent_proxy_udp:bool:0' \
		'transparent_proxy_dns:bool:0' \
		'tag:string' \
		'sniffing_enabled:bool:0' \
		'sniffing_dest_override:list(or("http", "tls"))' \
		'allocate_strategy:or("always", "random")' \
		'allocate_refresh:uinteger' \
		'allocate_concurrency:uinteger'
}

outbound_section_validate() {
	uci_validate_section "$NAME" "outbound" "$1" \
		'send_through:ipaddr:0.0.0.0' \
		'protocol:string' \
		'tag:string' \
		'proxy_settings_tag:string' \
		'mux_enabled:bool:0' \
		'mux_concurrency:uinteger:8'
}

add_v2ray_rules() {
	local port="$1"
	local server_ips="$2"
	local addition_proxy="$3"

	# ToutyRater/v2ray-guide#24
	iptables-restore --noflush <<-EOF 2>/dev/null
		*nat
		:V2RAY -
		$(for s in $server_ips ; do echo "-A V2RAY -d $s -j RETURN" ; done)
		-A V2RAY -d 0.0.0.0/8 -j RETURN
		-A V2RAY -d 10.0.0.0/8 -j RETURN
		-A V2RAY -d 127.0.0.0/8 -j RETURN
		-A V2RAY -d 169.254.0.0/16 -j RETURN
		-A V2RAY -d 172.16.0.0/12 -j RETURN
		-A V2RAY -d 192.168.0.0/16 -j RETURN
		-A V2RAY -d 224.0.0.0/4 -j RETURN
		-A V2RAY -d 240.0.0.0/4 -j RETURN
		-A V2RAY -p tcp -j REDIRECT --to-ports $port
		-A PREROUTING -p tcp -j V2RAY
		#-A OUTPUT -p tcp -j V2RAY
		COMMIT
	EOF

	if [ -n "$addition_proxy" ] ; then
		ip rule add fwmark 1 lookup 100
		ip route add local default dev lo table 100 2>/dev/null

		local d_port=""
		if [ "$addition_proxy" = "dns" ] ; then
			d_port="--dport 53"
		fi
		iptables-restore --noflush <<-EOF 2>/dev/null
			*mangle
			:V2RAY -
			#:V2RAY_MARK -
			-A V2RAY -d 0.0.0.0/8 -j RETURN
			-A V2RAY -d 10.0.0.0/8 -j RETURN
			-A V2RAY -d 127.0.0.0/8 -j RETURN
			-A V2RAY -d 169.254.0.0/16 -j RETURN
			-A V2RAY -d 172.16.0.0/12 -j RETURN
			-A V2RAY -d 192.168.0.0/16 -j RETURN
			-A V2RAY -d 224.0.0.0/4 -j RETURN
			-A V2RAY -d 240.0.0.0/4 -j RETURN
			-A V2RAY -p udp $d_port -j TPROXY --on-port $port --tproxy-mark 0x01/0x01
			#-A V2RAY_MARK -p udp $d_port -j MARK --set-mark 1
			-A PREROUTING -p udp -j V2RAY
			#-A OUTPUT -p udp -j V2RAY_MARK
			COMMIT
		EOF
	fi
}

clear_v2ray_rules() {
	iptables-save --counters | grep -v "V2RAY" | iptables-restore --counters

	ip route flush table 100
	ip route del local default dev lo table 100 2>/dev/null
	while ip rule del fwmark 1 lookup 100 2>/dev/null ; do true ; done
}

add_dns_settings() {
	local section="${1}_dns"

	if ! dns_section_validate "$section" ; then
		_err "Invalid DNS config: $section, skip"
		return 1
	fi

	if [ "x$enabled" != "x1" ] ; then
		_info "DNS disabled: $section"
		return 0
	fi

	json_add_object "dns"

	test -n "$tag" && \
		json_add_string "tag" "$tag"
	test -n "$client_ip" && \
		json_add_string "clientIp" "$client_ip"

	if [ -n "$hosts" ] ; then
		json_add_object "hosts"

		local h
		for h in $hosts ; do
			local domain="$(echo "$h" | cut -d'|' -f1)"
			local ip="$(echo "$h" | cut -d'|' -f2)"

			if [ -n "$domain" ] && [ -n "$ip" ] ; then
				json_add_string "$domain" "$ip"
			fi
		done

		json_close_object
	fi

	if [ -n "$servers" ] ; then
		json_add_array "servers"

		for ss in $servers ; do
			if dns_server_section_validate "$ss" ; then
				if [ -z "$address" ] ; then
					continue
				fi

				if [ -z "$port" ] && [ -z "$domains" ] ; then
					json_add_string "" "$address"
				else
					json_add_object ""
					json_add_string "address" "$address"

					if [ -n "$port" ] ; then
						json_add_int "port" "$port"
					fi

					if [ -n "$domains" ] ; then
						json_add_array "domains"

						local d
						for d in $domains ; do
							json_add_string "" "$d"
						done

						json_close_array
					fi

					json_close_object
				fi
			fi
		done

		json_close_array
	fi

	json_close_object
}

add_routing_settings() {
	local section="${1}_routing"

	if ! routing_section_validate "$section" ; then
		_err "Invalid routing config: $section, skip"
		return 1
	fi

	if [ "x$enabled" != "x1" ] ; then
		_info "Routing disabled: $section"
		return 0
	fi

	json_add_object "routing"

	json_add_string "domainStrategy" "$domain_strategy"

	if [ -n "$rules" ] ; then
		json_add_array "rules"

		local rs
		for rs in $rules ; do
			if routing_rule_section_validate "$rs" ; then
				json_add_object ""

				json_add_string "type" "$type"

				if [ -n "$domain" ] ; then
					json_add_array "domain"
					local d
					for d in $domain ; do
						json_add_string "" "$d"
					done
					json_close_array
				fi

				if [ -n "$ip" ] ; then
					json_add_array "ip"
					local i
					for i in $ip ; do
						json_add_string "" "$i"
					done
					json_close_array
				fi

				if [ -n "$port" ] ; then
					json_add_string "port" "$(echo "$port" | tr -s ' ' ',')"
				fi

				if [ -n "$network" ] ; then
					json_add_string "network" "$(echo "$network" | tr -s ' ' ',')"
				fi

				if [ -n "$source" ] ; then
					json_add_array "source"
					local s
					for s in $source ; do
						json_add_string "" "$s"
					done
					json_close_array
				fi

				if [ -n "$user" ] ; then
					json_add_array "user"
					local u
					for u in $user ; do
						json_add_string "" "$u"
					done
					json_close_array
				fi

				if [ -n "$inbound_tag" ] ; then
					json_add_array "inboundTag"
					local it
					for it in $inbound_tag ; do
						json_add_string "" "$it"
					done
					json_close_array
				fi

				if [ -n "$protocol" ] ; then
					json_add_array "protocol"
					local p
					for p in $protocol ; do
						json_add_string "" "$p"
					done
					json_close_array
				fi

				test -n "$attrs" && \
					json_add_string "attrs" "$attrs"
				test -n "$outbound_tag" && \
					json_add_string "outboundTag" "$outbound_tag"
				test -n "$balancer_tag" && \
					json_add_string "balancerTag" "$balancer_tag"

				json_close_object
			fi
		done

		json_close_array
	fi

	if [ -n "$balancers" ] ; then
		json_add_array "balancers"
		local bs
		for bs in $balancers ; do
			if routing_balancer_section_validate "$bs" ; then
				json_add_object ""
				json_add_string "tag" "$tag"
				json_add_array "selector"
				local s
				for s in $selector ; do
					json_add_string "" "$s"
				done
				json_close_array
				json_close_object
			fi
		done
		json_close_array
	fi

	json_close_object
}

add_policy_settings() {
	local section="${1}_policy"

	if ! policy_section_validate "$section" ; then
		_err "Invalid policy config: $section, skip"
		return 1
	fi

	if [ "x$enabled" != "x1" ] ; then
		_info "Policy disabled: $section"
		return 0
	fi

	json_add_object "policy"

	if [ -n "$levels" ] ; then
		json_add_object "levels"
		local l_s
		for l_s in $levels ; do
			if policy_level_section_validate "$l_s" ; then
				json_add_object "$level"
				json_add_int "handshake" "$handshake"
				json_add_int "connIdle" "$conn_idle"
				json_add_int "uplinkOnly" "$uplink_only"
				json_add_int "downlinkOnly" "$downlink_only"
				json_add_boolean "statsUserUplink" "$stats_user_uplink"
				json_add_boolean "statsUserDownlink" "$stats_user_downlink"
				if [ -n "$buffer_size" ] ; then
					json_add_int "bufferSize" "$buffer_size"
				fi
				json_close_object
			fi
		done
		json_close_object
	fi

	json_add_object "system"
	json_add_boolean "statsInboundUplink" "$system_stats_inbound_uplink"
	json_add_boolean "statsInboundDownlink" "$system_stats_inbound_downlink"
	json_close_object

	json_close_object
}

add_reverse_settings() {
	local section="${1}_reverse"

	if ! reverse_section_validate "$section" ; then
		_err "Invalid reverse config: $section, skip"
		return 1
	fi

	if [ "x$enabled" != "x1" ] ; then
		_info "Reverse disabled: $section"
		return 0
	fi

	json_add_object "reverse"

	if [ -n "$bridges" ] ; then
		json_add_array "bridges"
		local b
		for b in $bridges ; do
			local tag="$(echo "$b" | cut -d'|' -f1)"
			local domain="$(echo "$b" | cut -d'|' -f2)"
			if [ -n "$tag" ] && [ -n "$domain" ] ; then
				json_add_object ""
				json_add_string "tag" "$tag"
				json_add_string "domain" "$domain"
				json_close_object
			fi
		done
		json_close_array
	fi

	if [ -n "portals" ] ; then
		json_add_array "portals"
		local p
		for p in $portals ; do
			local tag="$(echo "$p" | cut -d'|' -f1)"
			local domain="$(echo "$p" | cut -d'|' -f2)"
			if [ -n "$tag" ] && [ -n "$domain" ] ; then
				json_add_object ""
				json_add_string "tag" "$tag"
				json_add_string "domain" "$domain"
				json_close_object
			fi
		done
		json_close_array
	fi

	json_close_object
}

add_transport_settings() {
	local section="$1"

	local transport_json="/etc/v2ray/transport.json"

	if [ ! -f "$transport_json" ] ; then
		_err "Transport config file not found: $transport_json"
		return 1
	fi

	local json
	json="$(get_value_from_file "$transport_json" "$section")"
	if [ -z "$json" ] ; then
		_err "Invalid transport config: $section"
		return 1
	fi

	json_add_object "transport"
	eval "$(jshn -r "$json" 2>/dev/null | grep -v "json_init")"
	json_close_object
}

add_inbound_setting() {
	local section="$1"

	if ! inbound_section_validate "$section" ; then
		_err "Invalid inbound section: $section"
		return 1
	fi

	json_add_object ""

	json_add_string "listen" "$listen"
	json_add_int "port" "$port"
	json_add_string "protocol" "$protocol"

	test -n "$tag" && \
		json_add_string "tag" "$tag"

	json_add_object "sniffing"
	json_add_boolean "enabled" "$sniffing_enabled"
	if [ -n "$sniffing_dest_override" ] ; then
		json_add_array "destOverride"
		local d
		for d in $sniffing_dest_override ; do
			json_add_string "" "$d"
		done
		json_close_array
	fi
	json_close_object

	if [ -n "$allocate_strategy" ] ; then
		json_add_object "allocate"
		json_add_string "strategy" "$allocate_strategy"
		test -n "$allocate_refresh" && \
			json_add_int "refresh" "$allocate_refresh"
		test -n "$allocate_concurrency" &&	\
			json_add_int "concurrency" "$allocate_concurrency"
		json_close_object
	fi

	if [ "x$protocol" = "xdokodemo-door" ] && \
		[ -n "$port" ] && \
		[ "x$transparent_proxy_enabled" = "x1" ] ; then
		TRANSPARENT_PROXY_ENABLED="1"
		TRANSPARENT_PROXY_PORT="$port"

		local network_types="tcp"
		if [ "x$transparent_proxy_udp" = "x1" ] ; then
			TRANSPARENT_PROXY_ADDITION="udp"
			network_types="$network_types,udp"
		elif [ "x$transparent_proxy_dns" = "x1" ] ; then
			TRANSPARENT_PROXY_ADDITION="dns"
			network_types="$network_types,udp"
		else
			TRANSPARENT_PROXY_ADDITION=""
		fi

		json_add_object "settings"
		json_add_string "network" "$network_types"
		json_add_int "timeout" "30"
		json_add_boolean "followRedirect" "1"
		json_close_object
	else
		local inbound_settings_json="/etc/v2ray/inbound-settings.json"
		if [ -f "$inbound_settings_json" ] ; then
			local json
			json="$(get_value_from_file "$inbound_settings_json" "$section")"

			if [ -n "$json" ] ; then
				json_add_object "settings"
				eval "$(jshn -r "$json" 2>/dev/null | grep -v "json_init")"
				json_close_object
			fi
		fi
	fi

	local inbound_stream_settings_json="/etc/v2ray/inbound-stream-settings.json"
	if [ -f "$inbound_stream_settings_json" ] ; then
		local json
		json="$(get_value_from_file "$inbound_stream_settings_json" "$section")"

		if [ -n "$json" ] ; then
			json_add_object "streamSettings"
			eval "$(jshn -r "$json" 2>/dev/null | grep -v "json_init")"
			json_close_object
		fi
	fi

	json_close_object
}

add_outbound_setting() {
	local section="$1"

	if ! outbound_section_validate "$section" ; then
		_err "Invalid outbound section: $section"
		return 1
	fi

	json_add_object ""

	json_add_string "sendThrough" "$send_through"
	json_add_string "protocol" "$protocol"
	test -n "$tag" && \
		json_add_string "tag" "$tag"

	if [ -n "$proxy_settings_tag" ] ; then
		json_add_object "proxySettings"
		json_add_string "tag" "$proxy_settings_tag"
		json_close_object
	fi

	json_add_object "mux"
	json_add_boolean "enabled" "$mux_enabled"
	json_add_int "concurrency" "$mux_concurrency"
	json_close_object

	local outbound_settings_json="/etc/v2ray/outbound-settings.json"
	if [ -f "$outbound_settings_json" ] ; then
		local json
		json="$(get_value_from_file "$outbound_settings_json" "$section")"

		if [ -n "$json" ] ; then
			local commands
			commands="$(jshn -r "$json" 2>/dev/null | grep -v "json_init")"

			json_add_object "settings"
			eval "$commands"
			json_close_object

			if [ -n "$TRANSPARENT_PROXY_ENABLED" ] ; then
				local address_commands="$(echo "$commands" | grep "'address'" | cut -d';' -f1 | cut -d' ' -f3)"
				if [ -n "$address_commands" ] ; then
					local a
					for a in $address_commands ; do
						# remove single quotes
						eval "local address=$a"
						# check if is a IPv4 address
						if [ -n "$(echo "$address" | cut -d'.' -f4)" ] ; then
							if [ -z "$TRANSPARENT_PROXY_SERVER_IPS" ] ; then
								TRANSPARENT_PROXY_SERVER_IPS="$address"
							else
								TRANSPARENT_PROXY_SERVER_IPS="$TRANSPARENT_PROXY_SERVER_IPS $address"
							fi
						fi
					done
				fi
			fi

		fi
	fi

	local outbound_stream_settings_json="/etc/v2ray/outbound-stream-settings.json"
	if [ -f "$outbound_stream_settings_json" ] ; then
		local json
		json="$(get_value_from_file "$outbound_stream_settings_json" "$section")"

		if [ -n "$json" ] ; then
			json_add_object "streamSettings"
			eval "$(jshn -r "$json" 2>/dev/null | grep -v "json_init")"
			json_close_object
		fi
	fi

	json_close_object
}

start_instance() {
	local section="$1"

	if ! v2ray_section_validate "$section" ; then
		_err "Invalid config."
		return 1
	fi

	if [ "x$enabled" != "x1" ] ; then
		return 0
	fi

	if [ -z "$v2ray_file" ] || ! ( v2ray_file_validate "$v2ray_file" ) ; then
		_err "Invalid V2Ray file."
		return 1
	fi

	if [ -z "$asset_location" ] && [ -d "$asset_location" ] ; then
		export V2RAY_LOCATION_ASSET="$asset_location"
	fi

	local temp_config

	if [ -n "$config_file" ] ; then
		if [ ! -s "$config_file" ] ; then
			_err "Config file not found: $config_file"
			return 1
		fi

		if ! ( eval "$v2ray_file --test --config=\"$config_file\" >/dev/null 2>&1" ) ; then
			_err "Validate config file failed: $config_file"
			return 1
		fi

		temp_config="$config_file"
	else
		test -d "$CONFIG_FOLDER" || mkdir -p "$CONFIG_FOLDER"

		temp_config="$CONFIG_FOLDER/v2ray.${section}.json"

		local old_ns
		json_set_namespace "$section" old_ns
		json_init

		if [ -n "$loglevel" ] && [ "$loglevel" != "none" ] ; then
			json_add_object "log"
			json_add_string "loglevel" "$loglevel"
			json_add_string "access" "$access_log"
			json_add_string "error" "$error_log"
			json_close_object
		fi

		if [ "x$stats_enabled" = "x1" ] ; then
			json_add_object "stats"
			json_close_object
		fi

		add_dns_settings "$section"
		add_routing_settings "$section"
		add_policy_settings "$section"
		add_reverse_settings "$section"

		if [ "x$transport_enabled" = "x1" ] ; then
			add_transport_settings "$section"
		fi

		if [ -n "$inbounds" ] ; then
			json_add_array "inbounds"
			local is
			for is in $inbounds ; do
				add_inbound_setting "$is"
			done
			json_close_array
		fi

		if [ -n "$outbounds" ] ; then
			json_add_array "outbounds"
			local os
			for os in $outbounds ; do
				add_outbound_setting "$os"
			done
			json_close_array
		fi

		json_dump -i >"$temp_config"
		json_cleanup
		json_set_namespace "$old_ns"

		if [ ! -s "$temp_config" ] ; then
			_err "Error when create config file: $temp_config"
			return 1
		fi
	fi

	procd_open_instance "$NAME.$section"
	procd_set_param command "$v2ray_file"
	procd_append_param command "--config=$temp_config"
	procd_set_param respawn
	procd_set_param file "$temp_config"
	procd_set_param stderr 1 # forward stderr of the command to logd
	procd_set_param stdout 1
	procd_close_instance
}

service_triggers() {
	procd_add_reload_trigger "$NAME"
}

start_service() {
	config_load "$NAME"
	config_foreach start_instance "v2ray"

	clear_v2ray_rules

	if [ -n "$TRANSPARENT_PROXY_ENABLED" ] ; then
		add_v2ray_rules "$TRANSPARENT_PROXY_PORT" \
			"$TRANSPARENT_PROXY_SERVER_IPS" \
			"$TRANSPARENT_PROXY_ADDITION"
	fi

	unset TRANSPARENT_PROXY_ENABLED \
		TRANSPARENT_PROXY_PORT \
		TRANSPARENT_PROXY_SERVER_IPS \
		TRANSPARENT_PROXY_ADDITION
}

stop_service() {
	clear_v2ray_rules
}
